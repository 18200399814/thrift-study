/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HelloBidiService_H
#define HelloBidiService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "helloBidiService_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class HelloBidiServiceIf {
 public:
  virtual ~HelloBidiServiceIf() {}
  virtual void sayHello(const std::string& msg) = 0;
};

class HelloBidiServiceIfFactory {
 public:
  typedef HelloBidiServiceIf Handler;

  virtual ~HelloBidiServiceIfFactory() {}

  virtual HelloBidiServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HelloBidiServiceIf* /* handler */) = 0;
};

class HelloBidiServiceIfSingletonFactory : virtual public HelloBidiServiceIfFactory {
 public:
  HelloBidiServiceIfSingletonFactory(const ::std::shared_ptr<HelloBidiServiceIf>& iface) : iface_(iface) {}
  virtual ~HelloBidiServiceIfSingletonFactory() {}

  virtual HelloBidiServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HelloBidiServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<HelloBidiServiceIf> iface_;
};

class HelloBidiServiceNull : virtual public HelloBidiServiceIf {
 public:
  virtual ~HelloBidiServiceNull() {}
  void sayHello(const std::string& /* msg */) {
    return;
  }
};

typedef struct _HelloBidiService_sayHello_args__isset {
  _HelloBidiService_sayHello_args__isset() : msg(false) {}
  bool msg :1;
} _HelloBidiService_sayHello_args__isset;

class HelloBidiService_sayHello_args {
 public:

  HelloBidiService_sayHello_args(const HelloBidiService_sayHello_args&);
  HelloBidiService_sayHello_args& operator=(const HelloBidiService_sayHello_args&);
  HelloBidiService_sayHello_args() : msg() {
  }

  virtual ~HelloBidiService_sayHello_args() noexcept;
  std::string msg;

  _HelloBidiService_sayHello_args__isset __isset;

  void __set_msg(const std::string& val);

  bool operator == (const HelloBidiService_sayHello_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const HelloBidiService_sayHello_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloBidiService_sayHello_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HelloBidiService_sayHello_pargs {
 public:


  virtual ~HelloBidiService_sayHello_pargs() noexcept;
  const std::string* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class HelloBidiServiceClient : virtual public HelloBidiServiceIf {
 public:
  HelloBidiServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HelloBidiServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sayHello(const std::string& msg);
  void send_sayHello(const std::string& msg);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HelloBidiServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<HelloBidiServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HelloBidiServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sayHello(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HelloBidiServiceProcessor(::std::shared_ptr<HelloBidiServiceIf> iface) :
    iface_(iface) {
    processMap_["sayHello"] = &HelloBidiServiceProcessor::process_sayHello;
  }

  virtual ~HelloBidiServiceProcessor() {}
};

class HelloBidiServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HelloBidiServiceProcessorFactory(const ::std::shared_ptr< HelloBidiServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< HelloBidiServiceIfFactory > handlerFactory_;
};

class HelloBidiServiceMultiface : virtual public HelloBidiServiceIf {
 public:
  HelloBidiServiceMultiface(std::vector<std::shared_ptr<HelloBidiServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HelloBidiServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<HelloBidiServiceIf> > ifaces_;
  HelloBidiServiceMultiface() {}
  void add(::std::shared_ptr<HelloBidiServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void sayHello(const std::string& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sayHello(msg);
    }
    ifaces_[i]->sayHello(msg);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class HelloBidiServiceConcurrentClient : virtual public HelloBidiServiceIf {
 public:
  HelloBidiServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  HelloBidiServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sayHello(const std::string& msg);
  void send_sayHello(const std::string& msg);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
