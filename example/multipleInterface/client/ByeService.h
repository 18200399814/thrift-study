/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ByeService_H
#define ByeService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "bye_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ByeServiceIf {
 public:
  virtual ~ByeServiceIf() {}
  virtual void sayBye() = 0;
};

class ByeServiceIfFactory {
 public:
  typedef ByeServiceIf Handler;

  virtual ~ByeServiceIfFactory() {}

  virtual ByeServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ByeServiceIf* /* handler */) = 0;
};

class ByeServiceIfSingletonFactory : virtual public ByeServiceIfFactory {
 public:
  ByeServiceIfSingletonFactory(const ::std::shared_ptr<ByeServiceIf>& iface) : iface_(iface) {}
  virtual ~ByeServiceIfSingletonFactory() {}

  virtual ByeServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ByeServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<ByeServiceIf> iface_;
};

class ByeServiceNull : virtual public ByeServiceIf {
 public:
  virtual ~ByeServiceNull() {}
  void sayBye() {
    return;
  }
};


class ByeService_sayBye_args {
 public:

  ByeService_sayBye_args(const ByeService_sayBye_args&);
  ByeService_sayBye_args& operator=(const ByeService_sayBye_args&);
  ByeService_sayBye_args() {
  }

  virtual ~ByeService_sayBye_args() noexcept;

  bool operator == (const ByeService_sayBye_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ByeService_sayBye_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ByeService_sayBye_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ByeService_sayBye_pargs {
 public:


  virtual ~ByeService_sayBye_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ByeService_sayBye_result {
 public:

  ByeService_sayBye_result(const ByeService_sayBye_result&);
  ByeService_sayBye_result& operator=(const ByeService_sayBye_result&);
  ByeService_sayBye_result() {
  }

  virtual ~ByeService_sayBye_result() noexcept;

  bool operator == (const ByeService_sayBye_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ByeService_sayBye_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ByeService_sayBye_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ByeService_sayBye_presult {
 public:


  virtual ~ByeService_sayBye_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ByeServiceClient : virtual public ByeServiceIf {
 public:
  ByeServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ByeServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sayBye();
  void send_sayBye();
  void recv_sayBye();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ByeServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ByeServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ByeServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sayBye(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ByeServiceProcessor(::std::shared_ptr<ByeServiceIf> iface) :
    iface_(iface) {
    processMap_["sayBye"] = &ByeServiceProcessor::process_sayBye;
  }

  virtual ~ByeServiceProcessor() {}
};

class ByeServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ByeServiceProcessorFactory(const ::std::shared_ptr< ByeServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< ByeServiceIfFactory > handlerFactory_;
};

class ByeServiceMultiface : virtual public ByeServiceIf {
 public:
  ByeServiceMultiface(std::vector<std::shared_ptr<ByeServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ByeServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<ByeServiceIf> > ifaces_;
  ByeServiceMultiface() {}
  void add(::std::shared_ptr<ByeServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void sayBye() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sayBye();
    }
    ifaces_[i]->sayBye();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ByeServiceConcurrentClient : virtual public ByeServiceIf {
 public:
  ByeServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ByeServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sayBye();
  int32_t send_sayBye();
  void recv_sayBye(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
