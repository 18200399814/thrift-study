// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Hello.h"
#include <iostream>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#pragma comment(lib, "libthrift.lib")

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class HelloHandler : virtual public HelloIf {
	public:
	 HelloHandler() {
		// Your initialization goes here
	 }
	
	 void sayHello() {
		// Your implementation goes here
		printf("hello thrift\n");
	 }
};

int main(int argc, char **argv) 
{
	std::cout << "---server start---" << std::endl;

	int port = 9090;
	::std::shared_ptr<HelloHandler> handler(new HelloHandler());
	::std::shared_ptr<TProcessor> processor(new HelloProcessor(handler));
	::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
	::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
	
	TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
	server.serve();
	return 0;
}

