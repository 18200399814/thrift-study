// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "CalculatorService.h"
#include <cstdlib>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#pragma comment(lib,"libthrift.lib")  //Á´½Ó¿âÎÄ¼þ

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class CalculatorServiceHandler : virtual public CalculatorServiceIf {
 public:
  CalculatorServiceHandler() {
    // Your initialization goes here
  }

  int32_t add(const int32_t num1, const int32_t num2) {
    printf("server add: %d + %d = %d\n",num1,num2,num1 + num2);
	return num1 + num2;
  }

  int32_t sub(const int32_t num1, const int32_t num2) {
    printf("server sub: %d - %d =%d\n",num1,num2,num1 - num2);
	return num1 - num2;
  }

  int32_t mul(const int32_t num1, const int32_t num2) {
    printf("server mul: %d * %d =%d\n",num1,num2,num1 * num2);
	return num1 * num2;
  }

  int32_t div(const int32_t num1, const int32_t num2) {
	if (num2 == 0)
	{
		printf("server div error: divisor can't be zero");
		exit(-1);
	}
	
	printf("server div: %d / %d = %d\n",num1,num2,num1 / num2);
	return num1 / num2;
  }
};

int main(int argc, char **argv) {
	printf("---simple server start---\n");

	int port = 9090;
	::std::shared_ptr<CalculatorServiceHandler> handler(new CalculatorServiceHandler());
	::std::shared_ptr<TProcessor> processor(new CalculatorServiceProcessor(handler));
	::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
	::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
	
	TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
	server.serve();
	return 0;
}

